package jazy.minecraft.installer;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
//import java.net.JarURLConnection;
//import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;
//import java.util.jar.JarEntry;
//import java.util.jar.JarFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;




public class extractResources{
	
	static String myClassName; //Unused
    static final String MANIFEST = "META-INF/MANIFEST.MF";
    String jarName;
	
	public static void main(String[] args) { //For debug purposes
		new extractResources(false);
	}
	
	
	extractResources(boolean planB){
		
		
		
	
		
	//Slightly Stable (But not desired results...)
		if (planB){
			jarName="C:/Users/Jazy/Desktop/Minecraft Update Installer/MinecraftUpdater.jar";
			start.log("Path internal jar: "+this.getClass().getResource("/versions").getPath(),true);
		} else {
			jarName = getJarFileName(); //More like jarLocation
		}
	if (jarName==null) return; //Commencing PlanB
	ZipFile currentArchive = null;
	try {currentArchive = new ZipFile(jarName);} catch (IOException e) {} //Gets jarFile
	File toDir = new File(new File(jarName).getParent()); //Gets parent directory of jar file
	start.log("To Dir: "+toDir.getPath()+"\njarName: "+jarName,true);
	extract(toDir,currentArchive);
	}
	
	public void extract(File td,ZipFile arch){ int EL = 0; //Debug strategy (ErrorLevel)
	td.mkdir();
	EL = 1;                                                 //CHECKPOINT
	byte[] buffer = new byte[1024*4]; //Buffer
	ZipFile zf = null; //Gona use ZipFile for this sucker :D
	FileOutputStream out = null;
	InputStream in = null;
	start.log("Extracting to: "+td.getPath()+"\nArchive: "+arch.getName()+"\n",true);
	int extracted=0;
	EL = 2;                                                 //CHECKPOINT
	try{
		zf = arch;
		int size = zf.size();
		
		Enumeration<?> entries = zf.entries();
	EL = 3;                                                 //CHECKPOINT
		for (int i=0; i<size; i++) 
		{
EL = 301;
			if (!entries.hasMoreElements()) continue;
		    ZipEntry entry = (ZipEntry) entries.nextElement();
		    if (entry==null) continue;
		    
		    start.log("\nENTRY:"+entry.getName()+"\n", true);
		    if (!entry.getName().startsWith("versions/")) continue;
EL = 31;
		    if(entry.isDirectory())
			{ start.log("Its a Dir: "+entry.getName(),true);
		    	extract(new File(td+"/"+entry.getName()),new ZipFile("file:/"+jarName+"!/"+entry.getName()));
			}
EL = 32;
		    String pathname = td+"/"+entry.getName();
		    extracted ++;
EL = 33;
		    in = zf.getInputStream(entry);
		    File outFile = new File(pathname);
EL = 34;
            out = new FileOutputStream(outFile);                
    EL = 4;                                                 //CHECKPOINT
            while (true) 
            {
                int nRead = in.read(buffer, 0, buffer.length);
                if (nRead <= 0)
                    break;
                out.write(buffer, 0, nRead);
            }
            out.close();
            start.log("Extracted: "+outFile.getPath()+"\n",true);
    EL = 5;                                                 //CHECKPOINT
		}
		zf.close();
		in.close();
	EL = 6;                                                 //CHECKPOINT
	}catch(Exception e){
		start.log("ERROR EL="+EL+" : "+e.getMessage(),true);
		if(zf!=null) { try { zf.close(); } catch(IOException ioe) {;} }
		if(out!=null) { try {out.close();} catch(IOException ioe) {;} }
		if(in!=null) { try { in.close(); } catch(IOException ioe) {;} }
    
	}
	start.log("Extracted "+extracted+" files!", false);
	
	
	/* UNSTABLE BUILD!!!
	//File dir = new File(new File(this.getClass().getProtectionDomain().getCodeSource().getLocation().getFile()).getParent());
	URL url = this.getClass().getResource("extractResources.class");
	String scheme = url.getProtocol();
	if (!"jar".equals(scheme))
	  throw new IllegalArgumentException("Unsupported scheme: " + scheme);
	JarFile archive = null;
	try{
	JarURLConnection con = (JarURLConnection) url.openConnection();
	archive = con.getJarFile();
	}catch(Exception e){
		log("Error in extracting resources...",false);
		log("ERROR: "+e.getMessage(),true);
		System.out.println(e.getMessage());
	}
	
	Enumeration<JarEntry> entries = archive.entries();
	if ((entries==null)||!entries.hasMoreElements()) return;
	while (entries.hasMoreElements()) {
		System.out.println("While true on");
	  JarEntry entry = entries.nextElement();
	  if (entry.getName().startsWith("versions/")) {
	    log(entry.getName(),true);
		  
	  }
	}
	*/
	}
	
	/*Constructor Above*/
	
	/*
	void extract(String res, File dir){
		InputStream inn = null;
		FileOutputStream outt = null;
		byte[] buffer = new byte[1024*4];
		int totalb = 0;
		try{ //Creating directories vvvvvvvvvvvvdir = new File(new File(this.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getParent());
			inn = this.getClass().getResourceAsStream(res);
			dir.mkdirs();
			outt = new FileOutputStream(dir);
			int bytesread;
			while((bytesread=inn.read(buffer))!=-1){
			outt.write(buffer,0,bytesread);
			totalb+=bytesread;
		}
		}catch(Exception e){try {
			//Wow LoLs below
			
			log("INTERNAL ERROR!\n"+e.getMessage()+"\nResource"
				+this.getClass().getResource("/versions").getFile()+"\nDir= "
					+this.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().toString()+"\nDirofFile: "
					,false);
		} catch (URISyntaxException e1) {
			e1.printStackTrace();
		}}
		
		finally{
			try{outt.close();
			inn.close();}catch(Exception e){}
			log("Total Bytes extracted: "+totalb,false);
		}
		//Carry on
	}
	*/
	
	//Gets the Jar's File name
	private String getJarFileName ()
    {
		if (start.debug) {start.log("Name: "+this.getClass().getName().substring(this.getClass().getName().lastIndexOf(".")+1),true);}
      myClassName = this.getClass().getName().substring(this.getClass().getName().lastIndexOf(".")+1) + ".class";
      URL urlJar = this.getClass().getResource(myClassName);
      String urlStr = urlJar.toString();
      	if (start.debug) {start.log("Directory?: "+urlStr, true);}
      	int from;
      if (urlStr.contains("jar:file:")){
    	  from = "jar:file:".length();
      } else { //PLAN B (Running from workspace)
    	  new extractResources(true);
    	  return null;
      }
      while (urlStr.contains("%20")){
    	  int area = urlStr.indexOf("%20");
    	  urlStr = urlStr.substring(0,area)+" "+urlStr.substring(area+3); //Replaces
      }
      int to = urlStr.indexOf("!/");
      return urlStr.substring(from, to);
    }
	
	
}